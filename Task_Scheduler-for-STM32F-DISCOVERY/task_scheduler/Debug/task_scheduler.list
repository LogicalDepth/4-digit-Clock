
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001130  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080012d8  080012d8  000112d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012fc  080012fc  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080012fc  080012fc  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012fc  080012fc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012fc  080012fc  000112fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001300  08001300  00011300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08001304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000001c0  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00020060  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000e10  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000005b1  00000000  00000000  00020edd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000200  00000000  00000000  00021490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000169  00000000  00000000  00021690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002db7  00000000  00000000  000217f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000195d  00000000  00000000  000245b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009cdd  00000000  00000000  00025f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000d28  00000000  00000000  0002fbec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00030914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000060 	.word	0x20000060
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080012c0 	.word	0x080012c0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000064 	.word	0x20000064
 80001e4:	080012c0 	.word	0x080012c0

080001e8 <led_init_all>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void led_init_all(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 80001ee:	4b19      	ldr	r3, [pc, #100]	; (8000254 <led_init_all+0x6c>)
 80001f0:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 80001f2:	4b19      	ldr	r3, [pc, #100]	; (8000258 <led_init_all+0x70>)
 80001f4:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f043 0208 	orr.w	r2, r3, #8
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 8000232:	200c      	movs	r0, #12
 8000234:	f000 f82a 	bl	800028c <led_off>
    led_off(LED_ORANGE);
 8000238:	200d      	movs	r0, #13
 800023a:	f000 f827 	bl	800028c <led_off>
    led_off(LED_RED);
 800023e:	200e      	movs	r0, #14
 8000240:	f000 f824 	bl	800028c <led_off>
    led_off(LED_BLUE);
 8000244:	200f      	movs	r0, #15
 8000246:	f000 f821 	bl	800028c <led_off>



}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40023830 	.word	0x40023830
 8000258:	40020c00 	.word	0x40020c00

0800025c <led_on>:

void led_on(uint8_t led_no)
{
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000266:	4b08      	ldr	r3, [pc, #32]	; (8000288 <led_on+0x2c>)
 8000268:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	79fa      	ldrb	r2, [r7, #7]
 8000270:	2101      	movs	r1, #1
 8000272:	fa01 f202 	lsl.w	r2, r1, r2
 8000276:	431a      	orrs	r2, r3
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	601a      	str	r2, [r3, #0]

}
 800027c:	bf00      	nop
 800027e:	3714      	adds	r7, #20
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	40020c14 	.word	0x40020c14

0800028c <led_off>:

void led_off(uint8_t led_no)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <led_off+0x2c>)
 8000298:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	79fa      	ldrb	r2, [r7, #7]
 80002a0:	2101      	movs	r1, #1
 80002a2:	fa01 f202 	lsl.w	r2, r1, r2
 80002a6:	43d2      	mvns	r2, r2
 80002a8:	401a      	ands	r2, r3
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	601a      	str	r2, [r3, #0]

}
 80002ae:	bf00      	nop
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	40020c14 	.word	0x40020c14

080002bc <main>:




int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0

	enable_processor_faults();
 80002c0:	f000 f91a 	bl	80004f8 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 80002c4:	4807      	ldr	r0, [pc, #28]	; (80002e4 <main+0x28>)
 80002c6:	f000 f883 	bl	80003d0 <init_scheduler_stack>



	init_tasks_stacks();
 80002ca:	f000 f887 	bl	80003dc <init_tasks_stacks>

	led_init_all();
 80002ce:	f7ff ff8b 	bl	80001e8 <led_init_all>

    init_systick_timer(TICK_HZ);
 80002d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d6:	f000 f84b 	bl	8000370 <init_systick_timer>

    switch_sp_to_psp();
 80002da:	f000 f993 	bl	8000604 <switch_sp_to_psp>

    task1_handler();
 80002de:	f000 f806 	bl	80002ee <task1_handler>

    /* Loop forever */
	for(;;);
 80002e2:	e7fe      	b.n	80002e2 <main+0x26>
 80002e4:	2001ec00 	.word	0x2001ec00

080002e8 <Idle_task>:
}

void Idle_task(void){
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
	while(1);
 80002ec:	e7fe      	b.n	80002ec <Idle_task+0x4>

080002ee <task1_handler>:

}

void task1_handler(void)
{
 80002ee:	b580      	push	{r7, lr}
 80002f0:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 80002f2:	200c      	movs	r0, #12
 80002f4:	f7ff ffb2 	bl	800025c <led_on>
		task_delay(1000);
 80002f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fc:	f000 f990 	bl	8000620 <task_delay>
		led_off(LED_GREEN);
 8000300:	200c      	movs	r0, #12
 8000302:	f7ff ffc3 	bl	800028c <led_off>
		task_delay(1000);
 8000306:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800030a:	f000 f989 	bl	8000620 <task_delay>
		led_on(LED_GREEN);
 800030e:	e7f0      	b.n	80002f2 <task1_handler+0x4>

08000310 <task2_handler>:
	}
}

void task2_handler(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_ORANGE);
 8000314:	200d      	movs	r0, #13
 8000316:	f7ff ffa1 	bl	800025c <led_on>
		task_delay(500);
 800031a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800031e:	f000 f97f 	bl	8000620 <task_delay>
	    led_off(LED_ORANGE);
 8000322:	200d      	movs	r0, #13
 8000324:	f7ff ffb2 	bl	800028c <led_off>
		task_delay(500);
 8000328:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800032c:	f000 f978 	bl	8000620 <task_delay>
		led_on(LED_ORANGE);
 8000330:	e7f0      	b.n	8000314 <task2_handler+0x4>

08000332 <task3_handler>:
	}
}

void task3_handler(void)
{
 8000332:	b580      	push	{r7, lr}
 8000334:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
 8000336:	200e      	movs	r0, #14
 8000338:	f7ff ff90 	bl	800025c <led_on>
		task_delay(250);
 800033c:	20fa      	movs	r0, #250	; 0xfa
 800033e:	f000 f96f 	bl	8000620 <task_delay>
        led_off(LED_RED);
 8000342:	200e      	movs	r0, #14
 8000344:	f7ff ffa2 	bl	800028c <led_off>
		task_delay(250);
 8000348:	20fa      	movs	r0, #250	; 0xfa
 800034a:	f000 f969 	bl	8000620 <task_delay>
		led_on(LED_RED);
 800034e:	e7f2      	b.n	8000336 <task3_handler+0x4>

08000350 <task4_handler>:
	}
}


void task4_handler(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
 8000354:	200f      	movs	r0, #15
 8000356:	f7ff ff81 	bl	800025c <led_on>
		task_delay(125);
 800035a:	207d      	movs	r0, #125	; 0x7d
 800035c:	f000 f960 	bl	8000620 <task_delay>
	    led_off(LED_BLUE);
 8000360:	200f      	movs	r0, #15
 8000362:	f7ff ff93 	bl	800028c <led_off>
		task_delay(125);
 8000366:	207d      	movs	r0, #125	; 0x7d
 8000368:	f000 f95a 	bl	8000620 <task_delay>
		led_on(LED_BLUE);
 800036c:	e7f2      	b.n	8000354 <task4_handler+0x4>
	...

08000370 <init_systick_timer>:
	}

}

void init_systick_timer(uint32_t tick_hz)
{
 8000370:	b480      	push	{r7}
 8000372:	b087      	sub	sp, #28
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]

	uint32_t *pSRVR =(uint32_t*)0xE000E014;
 8000378:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <init_systick_timer+0x58>)
 800037a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR =(uint32_t*)0xE000E010;
 800037c:	4b13      	ldr	r3, [pc, #76]	; (80003cc <init_systick_timer+0x5c>)
 800037e:	613b      	str	r3, [r7, #16]
    uint32_t count_value = (SYSTICK_TIME_CLK / TICK_HZ - 1);
 8000380:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8000384:	60fb      	str	r3, [r7, #12]

    //clear the 24 bits of the registers
    *pSRVR &= ~(0x00FFFFFFFF);
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
    //set the value
    *pSRVR |= count_value;
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	431a      	orrs	r2, r3
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= (1<<1);
 8000398:	693b      	ldr	r3, [r7, #16]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f043 0202 	orr.w	r2, r3, #2
 80003a0:	693b      	ldr	r3, [r7, #16]
 80003a2:	601a      	str	r2, [r3, #0]
    *pSCSR |= (1<<2);
 80003a4:	693b      	ldr	r3, [r7, #16]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f043 0204 	orr.w	r2, r3, #4
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	601a      	str	r2, [r3, #0]

    //enable the Systick
    *pSCSR |= (1<<0);
 80003b0:	693b      	ldr	r3, [r7, #16]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f043 0201 	orr.w	r2, r3, #1
 80003b8:	693b      	ldr	r3, [r7, #16]
 80003ba:	601a      	str	r2, [r3, #0]

}
 80003bc:	bf00      	nop
 80003be:	371c      	adds	r7, #28
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	e000e014 	.word	0xe000e014
 80003cc:	e000e010 	.word	0xe000e010

080003d0 <init_scheduler_stack>:

__attribute__ ((naked))void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 80003d0:	4603      	mov	r3, r0
	__asm volatile ("MSR MSP,%0": :"r"(sched_top_of_stack):);
 80003d2:	f383 8808 	msr	MSP, r3
	__asm volatile ("BX LR");
 80003d6:	4770      	bx	lr
}
 80003d8:	bf00      	nop
	...

080003dc <init_tasks_stacks>:




void init_tasks_stacks(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0


	user_tasks[0].current_state = TASK_READY_STATE;
 80003e2:	4b3a      	ldr	r3, [pc, #232]	; (80004cc <init_tasks_stacks+0xf0>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 80003e8:	4b38      	ldr	r3, [pc, #224]	; (80004cc <init_tasks_stacks+0xf0>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 80003ee:	4b37      	ldr	r3, [pc, #220]	; (80004cc <init_tasks_stacks+0xf0>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 80003f6:	4b35      	ldr	r3, [pc, #212]	; (80004cc <init_tasks_stacks+0xf0>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 80003fe:	4b33      	ldr	r3, [pc, #204]	; (80004cc <init_tasks_stacks+0xf0>)
 8000400:	2200      	movs	r2, #0
 8000402:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48



    user_tasks[0].psp_value     = IDLE_STACK_START;
 8000406:	4b31      	ldr	r3, [pc, #196]	; (80004cc <init_tasks_stacks+0xf0>)
 8000408:	4a31      	ldr	r2, [pc, #196]	; (80004d0 <init_tasks_stacks+0xf4>)
 800040a:	601a      	str	r2, [r3, #0]
    user_tasks[1].psp_value     = T1_STACK_START;
 800040c:	4b2f      	ldr	r3, [pc, #188]	; (80004cc <init_tasks_stacks+0xf0>)
 800040e:	4a31      	ldr	r2, [pc, #196]	; (80004d4 <init_tasks_stacks+0xf8>)
 8000410:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value     = T2_STACK_START;
 8000412:	4b2e      	ldr	r3, [pc, #184]	; (80004cc <init_tasks_stacks+0xf0>)
 8000414:	4a30      	ldr	r2, [pc, #192]	; (80004d8 <init_tasks_stacks+0xfc>)
 8000416:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value     = T3_STACK_START;
 8000418:	4b2c      	ldr	r3, [pc, #176]	; (80004cc <init_tasks_stacks+0xf0>)
 800041a:	4a30      	ldr	r2, [pc, #192]	; (80004dc <init_tasks_stacks+0x100>)
 800041c:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value     = T4_STACK_START;
 800041e:	4b2b      	ldr	r3, [pc, #172]	; (80004cc <init_tasks_stacks+0xf0>)
 8000420:	4a2f      	ldr	r2, [pc, #188]	; (80004e0 <init_tasks_stacks+0x104>)
 8000422:	641a      	str	r2, [r3, #64]	; 0x40


    user_tasks[0].task_handler  = Idle_task;
 8000424:	4b29      	ldr	r3, [pc, #164]	; (80004cc <init_tasks_stacks+0xf0>)
 8000426:	4a2f      	ldr	r2, [pc, #188]	; (80004e4 <init_tasks_stacks+0x108>)
 8000428:	60da      	str	r2, [r3, #12]
    user_tasks[1].task_handler  = task1_handler;
 800042a:	4b28      	ldr	r3, [pc, #160]	; (80004cc <init_tasks_stacks+0xf0>)
 800042c:	4a2e      	ldr	r2, [pc, #184]	; (80004e8 <init_tasks_stacks+0x10c>)
 800042e:	61da      	str	r2, [r3, #28]
    user_tasks[2].task_handler  = task2_handler;
 8000430:	4b26      	ldr	r3, [pc, #152]	; (80004cc <init_tasks_stacks+0xf0>)
 8000432:	4a2e      	ldr	r2, [pc, #184]	; (80004ec <init_tasks_stacks+0x110>)
 8000434:	62da      	str	r2, [r3, #44]	; 0x2c
    user_tasks[3].task_handler  = task3_handler;
 8000436:	4b25      	ldr	r3, [pc, #148]	; (80004cc <init_tasks_stacks+0xf0>)
 8000438:	4a2d      	ldr	r2, [pc, #180]	; (80004f0 <init_tasks_stacks+0x114>)
 800043a:	63da      	str	r2, [r3, #60]	; 0x3c
    user_tasks[4].task_handler  = task4_handler;
 800043c:	4b23      	ldr	r3, [pc, #140]	; (80004cc <init_tasks_stacks+0xf0>)
 800043e:	4a2d      	ldr	r2, [pc, #180]	; (80004f4 <init_tasks_stacks+0x118>)
 8000440:	64da      	str	r2, [r3, #76]	; 0x4c



	uint32_t *pPSP;

	for(int i = 0; i < MAX_TASKS; i++)
 8000442:	2300      	movs	r3, #0
 8000444:	60bb      	str	r3, [r7, #8]
 8000446:	e037      	b.n	80004b8 <init_tasks_stacks+0xdc>
	{
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 8000448:	4a20      	ldr	r2, [pc, #128]	; (80004cc <init_tasks_stacks+0xf0>)
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	011b      	lsls	r3, r3, #4
 800044e:	4413      	add	r3, r2
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	60fb      	str	r3, [r7, #12]

		pPSP--;
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	3b04      	subs	r3, #4
 8000458:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000460:	601a      	str	r2, [r3, #0]

		pPSP--;
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	3b04      	subs	r3, #4
 8000466:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t)user_tasks[i].task_handler;
 8000468:	4a18      	ldr	r2, [pc, #96]	; (80004cc <init_tasks_stacks+0xf0>)
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	011b      	lsls	r3, r3, #4
 800046e:	4413      	add	r3, r2
 8000470:	330c      	adds	r3, #12
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	461a      	mov	r2, r3
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	601a      	str	r2, [r3, #0]

		pPSP--;
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	3b04      	subs	r3, #4
 800047e:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	f06f 0202 	mvn.w	r2, #2
 8000486:	601a      	str	r2, [r3, #0]

		for(int j = 0; j<13; j++)
 8000488:	2300      	movs	r3, #0
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	e008      	b.n	80004a0 <init_tasks_stacks+0xc4>
		{
			pPSP--;
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	3b04      	subs	r3, #4
 8000492:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
		for(int j = 0; j<13; j++)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	3301      	adds	r3, #1
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2b0c      	cmp	r3, #12
 80004a4:	ddf3      	ble.n	800048e <init_tasks_stacks+0xb2>
		}

	    user_tasks[i].psp_value = (uint32_t)pPSP;
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	4908      	ldr	r1, [pc, #32]	; (80004cc <init_tasks_stacks+0xf0>)
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	011b      	lsls	r3, r3, #4
 80004ae:	440b      	add	r3, r1
 80004b0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_TASKS; i++)
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	3301      	adds	r3, #1
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	2b04      	cmp	r3, #4
 80004bc:	ddc4      	ble.n	8000448 <init_tasks_stacks+0x6c>
	}

}
 80004be:	bf00      	nop
 80004c0:	bf00      	nop
 80004c2:	3714      	adds	r7, #20
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	20000080 	.word	0x20000080
 80004d0:	2001f000 	.word	0x2001f000
 80004d4:	20020000 	.word	0x20020000
 80004d8:	2001fc00 	.word	0x2001fc00
 80004dc:	2001f800 	.word	0x2001f800
 80004e0:	2001f400 	.word	0x2001f400
 80004e4:	080002e9 	.word	0x080002e9
 80004e8:	080002ef 	.word	0x080002ef
 80004ec:	08000311 	.word	0x08000311
 80004f0:	08000333 	.word	0x08000333
 80004f4:	08000351 	.word	0x08000351

080004f8 <enable_processor_faults>:


void enable_processor_faults(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
	// 1. Enable all configurable exceptions like usage fault , mem fault, bus fault
		uint32_t * pSHCBR = (uint32_t *) 0xE000ED24;
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <enable_processor_faults+0x38>)
 8000500:	607b      	str	r3, [r7, #4]
		*pSHCBR |= (1 << 16);  //mem fault enable
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	601a      	str	r2, [r3, #0]
	    *pSHCBR |= (1 << 17);  //bus fault enable
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	601a      	str	r2, [r3, #0]
	    *pSHCBR |= (1 << 18);  //usage fault
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	601a      	str	r2, [r3, #0]

}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr
 8000530:	e000ed24 	.word	0xe000ed24

08000534 <get_psp_value>:

uint32_t get_psp_value(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
	return user_tasks[current_tasks].psp_value;
 8000538:	4b04      	ldr	r3, [pc, #16]	; (800054c <get_psp_value+0x18>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <get_psp_value+0x1c>)
 800053e:	011b      	lsls	r3, r3, #4
 8000540:	4413      	add	r3, r2
 8000542:	681b      	ldr	r3, [r3, #0]
}
 8000544:	4618      	mov	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	20000000 	.word	0x20000000
 8000550:	20000080 	.word	0x20000080

08000554 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
     user_tasks[current_tasks].psp_value = current_psp_value;
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <save_psp_value+0x20>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4a05      	ldr	r2, [pc, #20]	; (8000578 <save_psp_value+0x24>)
 8000562:	011b      	lsls	r3, r3, #4
 8000564:	4413      	add	r3, r2
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	601a      	str	r2, [r3, #0]
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	20000000 	.word	0x20000000
 8000578:	20000080 	.word	0x20000080

0800057c <update_next_task>:


void update_next_task(void)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 8000582:	23ff      	movs	r3, #255	; 0xff
 8000584:	607b      	str	r3, [r7, #4]

	for(int i = 0; i < (MAX_TASKS); i++)
 8000586:	2300      	movs	r3, #0
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	e024      	b.n	80005d6 <update_next_task+0x5a>
	{
		current_tasks++;
 800058c:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <update_next_task+0x7c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	3301      	adds	r3, #1
 8000592:	b2da      	uxtb	r2, r3
 8000594:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <update_next_task+0x7c>)
 8000596:	701a      	strb	r2, [r3, #0]
		current_tasks %= MAX_TASKS;
 8000598:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <update_next_task+0x7c>)
 800059a:	781a      	ldrb	r2, [r3, #0]
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <update_next_task+0x80>)
 800059e:	fba3 1302 	umull	r1, r3, r3, r2
 80005a2:	0899      	lsrs	r1, r3, #2
 80005a4:	460b      	mov	r3, r1
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	440b      	add	r3, r1
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <update_next_task+0x7c>)
 80005b0:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_tasks].current_state;
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <update_next_task+0x7c>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	4a12      	ldr	r2, [pc, #72]	; (8000600 <update_next_task+0x84>)
 80005b8:	011b      	lsls	r3, r3, #4
 80005ba:	4413      	add	r3, r2
 80005bc:	3308      	adds	r3, #8
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	607b      	str	r3, [r7, #4]
		if((state == TASK_READY_STATE) && (current_tasks !=0))
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d103      	bne.n	80005d0 <update_next_task+0x54>
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <update_next_task+0x7c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d106      	bne.n	80005de <update_next_task+0x62>
	for(int i = 0; i < (MAX_TASKS); i++)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	2b04      	cmp	r3, #4
 80005da:	ddd7      	ble.n	800058c <update_next_task+0x10>
 80005dc:	e000      	b.n	80005e0 <update_next_task+0x64>
			break;
 80005de:	bf00      	nop
	}
	if(state == TASK_BLOCKED_STATE)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2bff      	cmp	r3, #255	; 0xff
 80005e4:	d102      	bne.n	80005ec <update_next_task+0x70>
		current_tasks = 0;
 80005e6:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <update_next_task+0x7c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]

}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000000 	.word	0x20000000
 80005fc:	cccccccd 	.word	0xcccccccd
 8000600:	20000080 	.word	0x20000080

08000604 <switch_sp_to_psp>:


__attribute__((naked)) void switch_sp_to_psp(void)
{
	//initialize psp with the value of the first task
	__asm volatile ("PUSH {LR}");
 8000604:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 8000606:	f7ff ff95 	bl	8000534 <get_psp_value>
	__asm volatile ("MSR PSP,R0");
 800060a:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");
 800060e:	f85d eb04 	ldr.w	lr, [sp], #4

	//change the value of Control Register
	__asm volatile ("MOV R0,#0x02");
 8000612:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 8000616:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 800061a:	4770      	bx	lr

}
 800061c:	bf00      	nop
	...

08000620 <task_delay>:

void task_delay(uint32_t tick_count)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	if(current_tasks)
 8000628:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <task_delay+0x44>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d015      	beq.n	800065c <task_delay+0x3c>
	{
	   user_tasks[current_tasks].block_count = global_tick_count + tick_count;
 8000630:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <task_delay+0x48>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <task_delay+0x44>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	441a      	add	r2, r3
 800063e:	490b      	ldr	r1, [pc, #44]	; (800066c <task_delay+0x4c>)
 8000640:	0103      	lsls	r3, r0, #4
 8000642:	440b      	add	r3, r1
 8000644:	3304      	adds	r3, #4
 8000646:	601a      	str	r2, [r3, #0]
	   user_tasks[current_tasks].current_state = TASK_BLOCKED_STATE;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <task_delay+0x44>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4a07      	ldr	r2, [pc, #28]	; (800066c <task_delay+0x4c>)
 800064e:	011b      	lsls	r3, r3, #4
 8000650:	4413      	add	r3, r2
 8000652:	3308      	adds	r3, #8
 8000654:	22ff      	movs	r2, #255	; 0xff
 8000656:	701a      	strb	r2, [r3, #0]
	   Schedule();
 8000658:	f000 f85c 	bl	8000714 <Schedule>

    }
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000000 	.word	0x20000000
 8000668:	2000007c 	.word	0x2000007c
 800066c:	20000080 	.word	0x20000080

08000670 <PendSV_Handler>:
__attribute__((naked)) void PendSV_Handler(void)
{
	/*Save the context of current task */

		//1. Get current running task's PSP value
		__asm volatile("MRS R0,PSP");
 8000670:	f3ef 8009 	mrs	r0, PSP
		//2. Using that PSP value store SF2(R4 to R11)
		__asm volatile("STMDB R0!,{R4-R11}");
 8000674:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
		//3. Save the value of link register in stack
		__asm volatile("PUSH {LR}");
 8000678:	b500      	push	{lr}
		//4. Save the current value of PSP
		__asm volatile("BL save_psp_value");
 800067a:	f7ff ff6b 	bl	8000554 <save_psp_value>


		/*Retrieve the context of next task */

		//1. Decide next task to run
		__asm volatile("BL update_next_task");
 800067e:	f7ff ff7d 	bl	800057c <update_next_task>
		//2. Get its past PSP value
		__asm volatile("BL get_psp_value");
 8000682:	f7ff ff57 	bl	8000534 <get_psp_value>
		//3. Using that PSP value retrieve SF2(R4 to R11)
		__asm volatile("LDMIA R0!,{R4-R11}");
 8000686:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
		//4. Update PSP and exit
		__asm volatile("MSR PSP,R0");
 800068a:	f380 8809 	msr	PSP, r0
		//5. Reload the Exc_return from the stack
		__asm volatile("POP {LR}");
 800068e:	f85d eb04 	ldr.w	lr, [sp], #4

		__asm volatile("BX LR");
 8000692:	4770      	bx	lr

}
 8000694:	bf00      	nop
	...

08000698 <update_global_tick_count>:


void update_global_tick_count()
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
	global_tick_count++;
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <update_global_tick_count+0x18>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	4a03      	ldr	r2, [pc, #12]	; (80006b0 <update_global_tick_count+0x18>)
 80006a4:	6013      	str	r3, [r2, #0]
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	2000007c 	.word	0x2000007c

080006b4 <unblock_tasks>:

void unblock_tasks()
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
	for(int i = 1; i < MAX_TASKS; i++)
 80006ba:	2301      	movs	r3, #1
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	e01b      	b.n	80006f8 <unblock_tasks+0x44>
	{
		if(user_tasks[i].current_state != TASK_READY_STATE)
 80006c0:	4a12      	ldr	r2, [pc, #72]	; (800070c <unblock_tasks+0x58>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	4413      	add	r3, r2
 80006c8:	3308      	adds	r3, #8
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d010      	beq.n	80006f2 <unblock_tasks+0x3e>
		{
			if(user_tasks[i].block_count == global_tick_count)
 80006d0:	4a0e      	ldr	r2, [pc, #56]	; (800070c <unblock_tasks+0x58>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	011b      	lsls	r3, r3, #4
 80006d6:	4413      	add	r3, r2
 80006d8:	3304      	adds	r3, #4
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <unblock_tasks+0x5c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d106      	bne.n	80006f2 <unblock_tasks+0x3e>
			{
				user_tasks[i].current_state = TASK_READY_STATE;
 80006e4:	4a09      	ldr	r2, [pc, #36]	; (800070c <unblock_tasks+0x58>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	4413      	add	r3, r2
 80006ec:	3308      	adds	r3, #8
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
	for(int i = 1; i < MAX_TASKS; i++)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	3301      	adds	r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	dde0      	ble.n	80006c0 <unblock_tasks+0xc>
			}
		}
	}
}
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000080 	.word	0x20000080
 8000710:	2000007c 	.word	0x2000007c

08000714 <Schedule>:

void Schedule(void)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
	uint32_t *pPendSV = (uint32_t*)0xE000ED04;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <Schedule+0x20>)
 800071c:	607b      	str	r3, [r7, #4]
	*pPendSV |= (1 << 28);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	601a      	str	r2, [r3, #0]
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	e000ed04 	.word	0xe000ed04

08000738 <SysTick_Handler>:


void SysTick_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
	uint32_t *pPendSV = (uint32_t*)0xE000ED04;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <SysTick_Handler+0x28>)
 8000740:	607b      	str	r3, [r7, #4]
	update_global_tick_count();
 8000742:	f7ff ffa9 	bl	8000698 <update_global_tick_count>
	unblock_tasks();
 8000746:	f7ff ffb5 	bl	80006b4 <unblock_tasks>

	*pPendSV |= (1 << 28);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	601a      	str	r2, [r3, #0]


}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	e000ed04 	.word	0xe000ed04

08000764 <HardFault_Handler>:


void HardFault_Handler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	printf("Hard Fault\n");
 8000768:	4801      	ldr	r0, [pc, #4]	; (8000770 <HardFault_Handler+0xc>)
 800076a:	f000 fa19 	bl	8000ba0 <puts>
	while(1);
 800076e:	e7fe      	b.n	800076e <HardFault_Handler+0xa>
 8000770:	080012d8 	.word	0x080012d8

08000774 <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	printf("MemFault\n");
 8000778:	4801      	ldr	r0, [pc, #4]	; (8000780 <MemManage_Handler+0xc>)
 800077a:	f000 fa11 	bl	8000ba0 <puts>
	while(1);
 800077e:	e7fe      	b.n	800077e <MemManage_Handler+0xa>
 8000780:	080012e4 	.word	0x080012e4

08000784 <BusFault_Handler>:
}


void BusFault_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	printf("Bus Fault\n");
 8000788:	4801      	ldr	r0, [pc, #4]	; (8000790 <BusFault_Handler+0xc>)
 800078a:	f000 fa09 	bl	8000ba0 <puts>
	while(1);
 800078e:	e7fe      	b.n	800078e <BusFault_Handler+0xa>
 8000790:	080012f0 	.word	0x080012f0

08000794 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <ITM_SendChar+0x44>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a0d      	ldr	r2, [pc, #52]	; (80007d8 <ITM_SendChar+0x44>)
 80007a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007a8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <ITM_SendChar+0x48>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <ITM_SendChar+0x48>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007b6:	bf00      	nop
 80007b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d0f8      	beq.n	80007b8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	6013      	str	r3, [r2, #0]
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	e000edfc 	.word	0xe000edfc
 80007dc:	e0000e00 	.word	0xe0000e00

080007e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	e00a      	b.n	8000808 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007f2:	f3af 8000 	nop.w
 80007f6:	4601      	mov	r1, r0
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	60ba      	str	r2, [r7, #8]
 80007fe:	b2ca      	uxtb	r2, r1
 8000800:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	3301      	adds	r3, #1
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	429a      	cmp	r2, r3
 800080e:	dbf0      	blt.n	80007f2 <_read+0x12>
	}

return len;
 8000810:	687b      	ldr	r3, [r7, #4]
}
 8000812:	4618      	mov	r0, r3
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b086      	sub	sp, #24
 800081e:	af00      	add	r7, sp, #0
 8000820:	60f8      	str	r0, [r7, #12]
 8000822:	60b9      	str	r1, [r7, #8]
 8000824:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	e009      	b.n	8000840 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	60ba      	str	r2, [r7, #8]
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ffad 	bl	8000794 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	3301      	adds	r3, #1
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	429a      	cmp	r2, r3
 8000846:	dbf1      	blt.n	800082c <_write+0x12>
	}
	return len;
 8000848:	687b      	ldr	r3, [r7, #4]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <_close>:

int _close(int file)
{
 8000852:	b480      	push	{r7}
 8000854:	b083      	sub	sp, #12
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
	return -1;
 800085a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800085e:	4618      	mov	r0, r3
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000878:	605a      	str	r2, [r3, #4]
	return 0;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr

08000886 <_isatty>:

int _isatty(int file)
{
 8000886:	b480      	push	{r7}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
	return 1;
 800088e:	2301      	movs	r3, #1
}
 8000890:	4618      	mov	r0, r3
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800089a:	b480      	push	{r7}
 800089c:	b085      	sub	sp, #20
 800089e:	af00      	add	r7, sp, #0
 80008a0:	60f8      	str	r0, [r7, #12]
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
	return 0;
 80008a6:	2300      	movs	r3, #0
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
	...

080008b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008bc:	4a14      	ldr	r2, [pc, #80]	; (8000910 <_sbrk+0x5c>)
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <_sbrk+0x60>)
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <_sbrk+0x64>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d102      	bne.n	80008d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <_sbrk+0x64>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <_sbrk+0x68>)
 80008d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <_sbrk+0x64>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d207      	bcs.n	80008f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e4:	f000 fa8a 	bl	8000dfc <__errno>
 80008e8:	4603      	mov	r3, r0
 80008ea:	220c      	movs	r2, #12
 80008ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008f2:	e009      	b.n	8000908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <_sbrk+0x64>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <_sbrk+0x64>)
 8000904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000906:	68fb      	ldr	r3, [r7, #12]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20020000 	.word	0x20020000
 8000914:	00000400 	.word	0x00000400
 8000918:	200000d0 	.word	0x200000d0
 800091c:	20000220 	.word	0x20000220

08000920 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000922:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000924:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <LoopForever+0x6>)
  ldr r1, =_edata
 800092a:	490d      	ldr	r1, [pc, #52]	; (8000960 <LoopForever+0xa>)
  ldr r2, =_sidata
 800092c:	4a0d      	ldr	r2, [pc, #52]	; (8000964 <LoopForever+0xe>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000930:	e002      	b.n	8000938 <LoopCopyDataInit>

08000932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000936:	3304      	adds	r3, #4

08000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800093c:	d3f9      	bcc.n	8000932 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000940:	4c0a      	ldr	r4, [pc, #40]	; (800096c <LoopForever+0x16>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000944:	e001      	b.n	800094a <LoopFillZerobss>

08000946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000948:	3204      	adds	r2, #4

0800094a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800094c:	d3fb      	bcc.n	8000946 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800094e:	f000 fa5b 	bl	8000e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000952:	f7ff fcb3 	bl	80002bc <main>

08000956 <LoopForever>:

LoopForever:
  b LoopForever
 8000956:	e7fe      	b.n	8000956 <LoopForever>
  ldr   r0, =_estack
 8000958:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800095c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000960:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000964:	08001304 	.word	0x08001304
  ldr r2, =_sbss
 8000968:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800096c:	20000220 	.word	0x20000220

08000970 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000970:	e7fe      	b.n	8000970 <ADC_IRQHandler>
	...

08000974 <std>:
 8000974:	2300      	movs	r3, #0
 8000976:	b510      	push	{r4, lr}
 8000978:	4604      	mov	r4, r0
 800097a:	e9c0 3300 	strd	r3, r3, [r0]
 800097e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000982:	6083      	str	r3, [r0, #8]
 8000984:	8181      	strh	r1, [r0, #12]
 8000986:	6643      	str	r3, [r0, #100]	; 0x64
 8000988:	81c2      	strh	r2, [r0, #14]
 800098a:	6183      	str	r3, [r0, #24]
 800098c:	4619      	mov	r1, r3
 800098e:	2208      	movs	r2, #8
 8000990:	305c      	adds	r0, #92	; 0x5c
 8000992:	f000 f9e5 	bl	8000d60 <memset>
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <std+0x58>)
 8000998:	6263      	str	r3, [r4, #36]	; 0x24
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <std+0x5c>)
 800099c:	62a3      	str	r3, [r4, #40]	; 0x28
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <std+0x60>)
 80009a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <std+0x64>)
 80009a4:	6323      	str	r3, [r4, #48]	; 0x30
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <std+0x68>)
 80009a8:	6224      	str	r4, [r4, #32]
 80009aa:	429c      	cmp	r4, r3
 80009ac:	d006      	beq.n	80009bc <std+0x48>
 80009ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80009b2:	4294      	cmp	r4, r2
 80009b4:	d002      	beq.n	80009bc <std+0x48>
 80009b6:	33d0      	adds	r3, #208	; 0xd0
 80009b8:	429c      	cmp	r4, r3
 80009ba:	d105      	bne.n	80009c8 <std+0x54>
 80009bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80009c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009c4:	f000 ba44 	b.w	8000e50 <__retarget_lock_init_recursive>
 80009c8:	bd10      	pop	{r4, pc}
 80009ca:	bf00      	nop
 80009cc:	08000bb1 	.word	0x08000bb1
 80009d0:	08000bd3 	.word	0x08000bd3
 80009d4:	08000c0b 	.word	0x08000c0b
 80009d8:	08000c2f 	.word	0x08000c2f
 80009dc:	200000d4 	.word	0x200000d4

080009e0 <stdio_exit_handler>:
 80009e0:	4a02      	ldr	r2, [pc, #8]	; (80009ec <stdio_exit_handler+0xc>)
 80009e2:	4903      	ldr	r1, [pc, #12]	; (80009f0 <stdio_exit_handler+0x10>)
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <stdio_exit_handler+0x14>)
 80009e6:	f000 b869 	b.w	8000abc <_fwalk_sglue>
 80009ea:	bf00      	nop
 80009ec:	20000004 	.word	0x20000004
 80009f0:	08001149 	.word	0x08001149
 80009f4:	20000010 	.word	0x20000010

080009f8 <cleanup_stdio>:
 80009f8:	6841      	ldr	r1, [r0, #4]
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <cleanup_stdio+0x34>)
 80009fc:	4299      	cmp	r1, r3
 80009fe:	b510      	push	{r4, lr}
 8000a00:	4604      	mov	r4, r0
 8000a02:	d001      	beq.n	8000a08 <cleanup_stdio+0x10>
 8000a04:	f000 fba0 	bl	8001148 <_fflush_r>
 8000a08:	68a1      	ldr	r1, [r4, #8]
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <cleanup_stdio+0x38>)
 8000a0c:	4299      	cmp	r1, r3
 8000a0e:	d002      	beq.n	8000a16 <cleanup_stdio+0x1e>
 8000a10:	4620      	mov	r0, r4
 8000a12:	f000 fb99 	bl	8001148 <_fflush_r>
 8000a16:	68e1      	ldr	r1, [r4, #12]
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <cleanup_stdio+0x3c>)
 8000a1a:	4299      	cmp	r1, r3
 8000a1c:	d004      	beq.n	8000a28 <cleanup_stdio+0x30>
 8000a1e:	4620      	mov	r0, r4
 8000a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a24:	f000 bb90 	b.w	8001148 <_fflush_r>
 8000a28:	bd10      	pop	{r4, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000d4 	.word	0x200000d4
 8000a30:	2000013c 	.word	0x2000013c
 8000a34:	200001a4 	.word	0x200001a4

08000a38 <global_stdio_init.part.0>:
 8000a38:	b510      	push	{r4, lr}
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <global_stdio_init.part.0+0x30>)
 8000a3c:	4c0b      	ldr	r4, [pc, #44]	; (8000a6c <global_stdio_init.part.0+0x34>)
 8000a3e:	4a0c      	ldr	r2, [pc, #48]	; (8000a70 <global_stdio_init.part.0+0x38>)
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	4620      	mov	r0, r4
 8000a44:	2200      	movs	r2, #0
 8000a46:	2104      	movs	r1, #4
 8000a48:	f7ff ff94 	bl	8000974 <std>
 8000a4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000a50:	2201      	movs	r2, #1
 8000a52:	2109      	movs	r1, #9
 8000a54:	f7ff ff8e 	bl	8000974 <std>
 8000a58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a62:	2112      	movs	r1, #18
 8000a64:	f7ff bf86 	b.w	8000974 <std>
 8000a68:	2000020c 	.word	0x2000020c
 8000a6c:	200000d4 	.word	0x200000d4
 8000a70:	080009e1 	.word	0x080009e1

08000a74 <__sfp_lock_acquire>:
 8000a74:	4801      	ldr	r0, [pc, #4]	; (8000a7c <__sfp_lock_acquire+0x8>)
 8000a76:	f000 b9ec 	b.w	8000e52 <__retarget_lock_acquire_recursive>
 8000a7a:	bf00      	nop
 8000a7c:	20000215 	.word	0x20000215

08000a80 <__sfp_lock_release>:
 8000a80:	4801      	ldr	r0, [pc, #4]	; (8000a88 <__sfp_lock_release+0x8>)
 8000a82:	f000 b9e7 	b.w	8000e54 <__retarget_lock_release_recursive>
 8000a86:	bf00      	nop
 8000a88:	20000215 	.word	0x20000215

08000a8c <__sinit>:
 8000a8c:	b510      	push	{r4, lr}
 8000a8e:	4604      	mov	r4, r0
 8000a90:	f7ff fff0 	bl	8000a74 <__sfp_lock_acquire>
 8000a94:	6a23      	ldr	r3, [r4, #32]
 8000a96:	b11b      	cbz	r3, 8000aa0 <__sinit+0x14>
 8000a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a9c:	f7ff bff0 	b.w	8000a80 <__sfp_lock_release>
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <__sinit+0x28>)
 8000aa2:	6223      	str	r3, [r4, #32]
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <__sinit+0x2c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d1f5      	bne.n	8000a98 <__sinit+0xc>
 8000aac:	f7ff ffc4 	bl	8000a38 <global_stdio_init.part.0>
 8000ab0:	e7f2      	b.n	8000a98 <__sinit+0xc>
 8000ab2:	bf00      	nop
 8000ab4:	080009f9 	.word	0x080009f9
 8000ab8:	2000020c 	.word	0x2000020c

08000abc <_fwalk_sglue>:
 8000abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ac0:	4607      	mov	r7, r0
 8000ac2:	4688      	mov	r8, r1
 8000ac4:	4614      	mov	r4, r2
 8000ac6:	2600      	movs	r6, #0
 8000ac8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000acc:	f1b9 0901 	subs.w	r9, r9, #1
 8000ad0:	d505      	bpl.n	8000ade <_fwalk_sglue+0x22>
 8000ad2:	6824      	ldr	r4, [r4, #0]
 8000ad4:	2c00      	cmp	r4, #0
 8000ad6:	d1f7      	bne.n	8000ac8 <_fwalk_sglue+0xc>
 8000ad8:	4630      	mov	r0, r6
 8000ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ade:	89ab      	ldrh	r3, [r5, #12]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d907      	bls.n	8000af4 <_fwalk_sglue+0x38>
 8000ae4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	d003      	beq.n	8000af4 <_fwalk_sglue+0x38>
 8000aec:	4629      	mov	r1, r5
 8000aee:	4638      	mov	r0, r7
 8000af0:	47c0      	blx	r8
 8000af2:	4306      	orrs	r6, r0
 8000af4:	3568      	adds	r5, #104	; 0x68
 8000af6:	e7e9      	b.n	8000acc <_fwalk_sglue+0x10>

08000af8 <_puts_r>:
 8000af8:	6a03      	ldr	r3, [r0, #32]
 8000afa:	b570      	push	{r4, r5, r6, lr}
 8000afc:	6884      	ldr	r4, [r0, #8]
 8000afe:	4605      	mov	r5, r0
 8000b00:	460e      	mov	r6, r1
 8000b02:	b90b      	cbnz	r3, 8000b08 <_puts_r+0x10>
 8000b04:	f7ff ffc2 	bl	8000a8c <__sinit>
 8000b08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b0a:	07db      	lsls	r3, r3, #31
 8000b0c:	d405      	bmi.n	8000b1a <_puts_r+0x22>
 8000b0e:	89a3      	ldrh	r3, [r4, #12]
 8000b10:	0598      	lsls	r0, r3, #22
 8000b12:	d402      	bmi.n	8000b1a <_puts_r+0x22>
 8000b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b16:	f000 f99c 	bl	8000e52 <__retarget_lock_acquire_recursive>
 8000b1a:	89a3      	ldrh	r3, [r4, #12]
 8000b1c:	0719      	lsls	r1, r3, #28
 8000b1e:	d513      	bpl.n	8000b48 <_puts_r+0x50>
 8000b20:	6923      	ldr	r3, [r4, #16]
 8000b22:	b18b      	cbz	r3, 8000b48 <_puts_r+0x50>
 8000b24:	3e01      	subs	r6, #1
 8000b26:	68a3      	ldr	r3, [r4, #8]
 8000b28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	60a3      	str	r3, [r4, #8]
 8000b30:	b9e9      	cbnz	r1, 8000b6e <_puts_r+0x76>
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	da2e      	bge.n	8000b94 <_puts_r+0x9c>
 8000b36:	4622      	mov	r2, r4
 8000b38:	210a      	movs	r1, #10
 8000b3a:	4628      	mov	r0, r5
 8000b3c:	f000 f87b 	bl	8000c36 <__swbuf_r>
 8000b40:	3001      	adds	r0, #1
 8000b42:	d007      	beq.n	8000b54 <_puts_r+0x5c>
 8000b44:	250a      	movs	r5, #10
 8000b46:	e007      	b.n	8000b58 <_puts_r+0x60>
 8000b48:	4621      	mov	r1, r4
 8000b4a:	4628      	mov	r0, r5
 8000b4c:	f000 f8b0 	bl	8000cb0 <__swsetup_r>
 8000b50:	2800      	cmp	r0, #0
 8000b52:	d0e7      	beq.n	8000b24 <_puts_r+0x2c>
 8000b54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000b58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b5a:	07da      	lsls	r2, r3, #31
 8000b5c:	d405      	bmi.n	8000b6a <_puts_r+0x72>
 8000b5e:	89a3      	ldrh	r3, [r4, #12]
 8000b60:	059b      	lsls	r3, r3, #22
 8000b62:	d402      	bmi.n	8000b6a <_puts_r+0x72>
 8000b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b66:	f000 f975 	bl	8000e54 <__retarget_lock_release_recursive>
 8000b6a:	4628      	mov	r0, r5
 8000b6c:	bd70      	pop	{r4, r5, r6, pc}
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	da04      	bge.n	8000b7c <_puts_r+0x84>
 8000b72:	69a2      	ldr	r2, [r4, #24]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	dc06      	bgt.n	8000b86 <_puts_r+0x8e>
 8000b78:	290a      	cmp	r1, #10
 8000b7a:	d004      	beq.n	8000b86 <_puts_r+0x8e>
 8000b7c:	6823      	ldr	r3, [r4, #0]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	6022      	str	r2, [r4, #0]
 8000b82:	7019      	strb	r1, [r3, #0]
 8000b84:	e7cf      	b.n	8000b26 <_puts_r+0x2e>
 8000b86:	4622      	mov	r2, r4
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f000 f854 	bl	8000c36 <__swbuf_r>
 8000b8e:	3001      	adds	r0, #1
 8000b90:	d1c9      	bne.n	8000b26 <_puts_r+0x2e>
 8000b92:	e7df      	b.n	8000b54 <_puts_r+0x5c>
 8000b94:	6823      	ldr	r3, [r4, #0]
 8000b96:	250a      	movs	r5, #10
 8000b98:	1c5a      	adds	r2, r3, #1
 8000b9a:	6022      	str	r2, [r4, #0]
 8000b9c:	701d      	strb	r5, [r3, #0]
 8000b9e:	e7db      	b.n	8000b58 <_puts_r+0x60>

08000ba0 <puts>:
 8000ba0:	4b02      	ldr	r3, [pc, #8]	; (8000bac <puts+0xc>)
 8000ba2:	4601      	mov	r1, r0
 8000ba4:	6818      	ldr	r0, [r3, #0]
 8000ba6:	f7ff bfa7 	b.w	8000af8 <_puts_r>
 8000baa:	bf00      	nop
 8000bac:	2000005c 	.word	0x2000005c

08000bb0 <__sread>:
 8000bb0:	b510      	push	{r4, lr}
 8000bb2:	460c      	mov	r4, r1
 8000bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bb8:	f000 f8fc 	bl	8000db4 <_read_r>
 8000bbc:	2800      	cmp	r0, #0
 8000bbe:	bfab      	itete	ge
 8000bc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8000bc4:	181b      	addge	r3, r3, r0
 8000bc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000bca:	bfac      	ite	ge
 8000bcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8000bce:	81a3      	strhlt	r3, [r4, #12]
 8000bd0:	bd10      	pop	{r4, pc}

08000bd2 <__swrite>:
 8000bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bd6:	461f      	mov	r7, r3
 8000bd8:	898b      	ldrh	r3, [r1, #12]
 8000bda:	05db      	lsls	r3, r3, #23
 8000bdc:	4605      	mov	r5, r0
 8000bde:	460c      	mov	r4, r1
 8000be0:	4616      	mov	r6, r2
 8000be2:	d505      	bpl.n	8000bf0 <__swrite+0x1e>
 8000be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000be8:	2302      	movs	r3, #2
 8000bea:	2200      	movs	r2, #0
 8000bec:	f000 f8d0 	bl	8000d90 <_lseek_r>
 8000bf0:	89a3      	ldrh	r3, [r4, #12]
 8000bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000bfa:	81a3      	strh	r3, [r4, #12]
 8000bfc:	4632      	mov	r2, r6
 8000bfe:	463b      	mov	r3, r7
 8000c00:	4628      	mov	r0, r5
 8000c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c06:	f000 b8e7 	b.w	8000dd8 <_write_r>

08000c0a <__sseek>:
 8000c0a:	b510      	push	{r4, lr}
 8000c0c:	460c      	mov	r4, r1
 8000c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c12:	f000 f8bd 	bl	8000d90 <_lseek_r>
 8000c16:	1c43      	adds	r3, r0, #1
 8000c18:	89a3      	ldrh	r3, [r4, #12]
 8000c1a:	bf15      	itete	ne
 8000c1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000c1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000c22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000c26:	81a3      	strheq	r3, [r4, #12]
 8000c28:	bf18      	it	ne
 8000c2a:	81a3      	strhne	r3, [r4, #12]
 8000c2c:	bd10      	pop	{r4, pc}

08000c2e <__sclose>:
 8000c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c32:	f000 b89d 	b.w	8000d70 <_close_r>

08000c36 <__swbuf_r>:
 8000c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c38:	460e      	mov	r6, r1
 8000c3a:	4614      	mov	r4, r2
 8000c3c:	4605      	mov	r5, r0
 8000c3e:	b118      	cbz	r0, 8000c48 <__swbuf_r+0x12>
 8000c40:	6a03      	ldr	r3, [r0, #32]
 8000c42:	b90b      	cbnz	r3, 8000c48 <__swbuf_r+0x12>
 8000c44:	f7ff ff22 	bl	8000a8c <__sinit>
 8000c48:	69a3      	ldr	r3, [r4, #24]
 8000c4a:	60a3      	str	r3, [r4, #8]
 8000c4c:	89a3      	ldrh	r3, [r4, #12]
 8000c4e:	071a      	lsls	r2, r3, #28
 8000c50:	d525      	bpl.n	8000c9e <__swbuf_r+0x68>
 8000c52:	6923      	ldr	r3, [r4, #16]
 8000c54:	b31b      	cbz	r3, 8000c9e <__swbuf_r+0x68>
 8000c56:	6823      	ldr	r3, [r4, #0]
 8000c58:	6922      	ldr	r2, [r4, #16]
 8000c5a:	1a98      	subs	r0, r3, r2
 8000c5c:	6963      	ldr	r3, [r4, #20]
 8000c5e:	b2f6      	uxtb	r6, r6
 8000c60:	4283      	cmp	r3, r0
 8000c62:	4637      	mov	r7, r6
 8000c64:	dc04      	bgt.n	8000c70 <__swbuf_r+0x3a>
 8000c66:	4621      	mov	r1, r4
 8000c68:	4628      	mov	r0, r5
 8000c6a:	f000 fa6d 	bl	8001148 <_fflush_r>
 8000c6e:	b9e0      	cbnz	r0, 8000caa <__swbuf_r+0x74>
 8000c70:	68a3      	ldr	r3, [r4, #8]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	60a3      	str	r3, [r4, #8]
 8000c76:	6823      	ldr	r3, [r4, #0]
 8000c78:	1c5a      	adds	r2, r3, #1
 8000c7a:	6022      	str	r2, [r4, #0]
 8000c7c:	701e      	strb	r6, [r3, #0]
 8000c7e:	6962      	ldr	r2, [r4, #20]
 8000c80:	1c43      	adds	r3, r0, #1
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d004      	beq.n	8000c90 <__swbuf_r+0x5a>
 8000c86:	89a3      	ldrh	r3, [r4, #12]
 8000c88:	07db      	lsls	r3, r3, #31
 8000c8a:	d506      	bpl.n	8000c9a <__swbuf_r+0x64>
 8000c8c:	2e0a      	cmp	r6, #10
 8000c8e:	d104      	bne.n	8000c9a <__swbuf_r+0x64>
 8000c90:	4621      	mov	r1, r4
 8000c92:	4628      	mov	r0, r5
 8000c94:	f000 fa58 	bl	8001148 <_fflush_r>
 8000c98:	b938      	cbnz	r0, 8000caa <__swbuf_r+0x74>
 8000c9a:	4638      	mov	r0, r7
 8000c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c9e:	4621      	mov	r1, r4
 8000ca0:	4628      	mov	r0, r5
 8000ca2:	f000 f805 	bl	8000cb0 <__swsetup_r>
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	d0d5      	beq.n	8000c56 <__swbuf_r+0x20>
 8000caa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000cae:	e7f4      	b.n	8000c9a <__swbuf_r+0x64>

08000cb0 <__swsetup_r>:
 8000cb0:	b538      	push	{r3, r4, r5, lr}
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <__swsetup_r+0xac>)
 8000cb4:	4605      	mov	r5, r0
 8000cb6:	6818      	ldr	r0, [r3, #0]
 8000cb8:	460c      	mov	r4, r1
 8000cba:	b118      	cbz	r0, 8000cc4 <__swsetup_r+0x14>
 8000cbc:	6a03      	ldr	r3, [r0, #32]
 8000cbe:	b90b      	cbnz	r3, 8000cc4 <__swsetup_r+0x14>
 8000cc0:	f7ff fee4 	bl	8000a8c <__sinit>
 8000cc4:	89a3      	ldrh	r3, [r4, #12]
 8000cc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000cca:	0718      	lsls	r0, r3, #28
 8000ccc:	d422      	bmi.n	8000d14 <__swsetup_r+0x64>
 8000cce:	06d9      	lsls	r1, r3, #27
 8000cd0:	d407      	bmi.n	8000ce2 <__swsetup_r+0x32>
 8000cd2:	2309      	movs	r3, #9
 8000cd4:	602b      	str	r3, [r5, #0]
 8000cd6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000cda:	81a3      	strh	r3, [r4, #12]
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ce0:	e034      	b.n	8000d4c <__swsetup_r+0x9c>
 8000ce2:	0758      	lsls	r0, r3, #29
 8000ce4:	d512      	bpl.n	8000d0c <__swsetup_r+0x5c>
 8000ce6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ce8:	b141      	cbz	r1, 8000cfc <__swsetup_r+0x4c>
 8000cea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	d002      	beq.n	8000cf8 <__swsetup_r+0x48>
 8000cf2:	4628      	mov	r0, r5
 8000cf4:	f000 f8b0 	bl	8000e58 <_free_r>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	6363      	str	r3, [r4, #52]	; 0x34
 8000cfc:	89a3      	ldrh	r3, [r4, #12]
 8000cfe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000d02:	81a3      	strh	r3, [r4, #12]
 8000d04:	2300      	movs	r3, #0
 8000d06:	6063      	str	r3, [r4, #4]
 8000d08:	6923      	ldr	r3, [r4, #16]
 8000d0a:	6023      	str	r3, [r4, #0]
 8000d0c:	89a3      	ldrh	r3, [r4, #12]
 8000d0e:	f043 0308 	orr.w	r3, r3, #8
 8000d12:	81a3      	strh	r3, [r4, #12]
 8000d14:	6923      	ldr	r3, [r4, #16]
 8000d16:	b94b      	cbnz	r3, 8000d2c <__swsetup_r+0x7c>
 8000d18:	89a3      	ldrh	r3, [r4, #12]
 8000d1a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d22:	d003      	beq.n	8000d2c <__swsetup_r+0x7c>
 8000d24:	4621      	mov	r1, r4
 8000d26:	4628      	mov	r0, r5
 8000d28:	f000 fa5c 	bl	80011e4 <__smakebuf_r>
 8000d2c:	89a0      	ldrh	r0, [r4, #12]
 8000d2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000d32:	f010 0301 	ands.w	r3, r0, #1
 8000d36:	d00a      	beq.n	8000d4e <__swsetup_r+0x9e>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60a3      	str	r3, [r4, #8]
 8000d3c:	6963      	ldr	r3, [r4, #20]
 8000d3e:	425b      	negs	r3, r3
 8000d40:	61a3      	str	r3, [r4, #24]
 8000d42:	6923      	ldr	r3, [r4, #16]
 8000d44:	b943      	cbnz	r3, 8000d58 <__swsetup_r+0xa8>
 8000d46:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000d4a:	d1c4      	bne.n	8000cd6 <__swsetup_r+0x26>
 8000d4c:	bd38      	pop	{r3, r4, r5, pc}
 8000d4e:	0781      	lsls	r1, r0, #30
 8000d50:	bf58      	it	pl
 8000d52:	6963      	ldrpl	r3, [r4, #20]
 8000d54:	60a3      	str	r3, [r4, #8]
 8000d56:	e7f4      	b.n	8000d42 <__swsetup_r+0x92>
 8000d58:	2000      	movs	r0, #0
 8000d5a:	e7f7      	b.n	8000d4c <__swsetup_r+0x9c>
 8000d5c:	2000005c 	.word	0x2000005c

08000d60 <memset>:
 8000d60:	4402      	add	r2, r0
 8000d62:	4603      	mov	r3, r0
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d100      	bne.n	8000d6a <memset+0xa>
 8000d68:	4770      	bx	lr
 8000d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8000d6e:	e7f9      	b.n	8000d64 <memset+0x4>

08000d70 <_close_r>:
 8000d70:	b538      	push	{r3, r4, r5, lr}
 8000d72:	4d06      	ldr	r5, [pc, #24]	; (8000d8c <_close_r+0x1c>)
 8000d74:	2300      	movs	r3, #0
 8000d76:	4604      	mov	r4, r0
 8000d78:	4608      	mov	r0, r1
 8000d7a:	602b      	str	r3, [r5, #0]
 8000d7c:	f7ff fd69 	bl	8000852 <_close>
 8000d80:	1c43      	adds	r3, r0, #1
 8000d82:	d102      	bne.n	8000d8a <_close_r+0x1a>
 8000d84:	682b      	ldr	r3, [r5, #0]
 8000d86:	b103      	cbz	r3, 8000d8a <_close_r+0x1a>
 8000d88:	6023      	str	r3, [r4, #0]
 8000d8a:	bd38      	pop	{r3, r4, r5, pc}
 8000d8c:	20000210 	.word	0x20000210

08000d90 <_lseek_r>:
 8000d90:	b538      	push	{r3, r4, r5, lr}
 8000d92:	4d07      	ldr	r5, [pc, #28]	; (8000db0 <_lseek_r+0x20>)
 8000d94:	4604      	mov	r4, r0
 8000d96:	4608      	mov	r0, r1
 8000d98:	4611      	mov	r1, r2
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	602a      	str	r2, [r5, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	f7ff fd7b 	bl	800089a <_lseek>
 8000da4:	1c43      	adds	r3, r0, #1
 8000da6:	d102      	bne.n	8000dae <_lseek_r+0x1e>
 8000da8:	682b      	ldr	r3, [r5, #0]
 8000daa:	b103      	cbz	r3, 8000dae <_lseek_r+0x1e>
 8000dac:	6023      	str	r3, [r4, #0]
 8000dae:	bd38      	pop	{r3, r4, r5, pc}
 8000db0:	20000210 	.word	0x20000210

08000db4 <_read_r>:
 8000db4:	b538      	push	{r3, r4, r5, lr}
 8000db6:	4d07      	ldr	r5, [pc, #28]	; (8000dd4 <_read_r+0x20>)
 8000db8:	4604      	mov	r4, r0
 8000dba:	4608      	mov	r0, r1
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	602a      	str	r2, [r5, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	f7ff fd0c 	bl	80007e0 <_read>
 8000dc8:	1c43      	adds	r3, r0, #1
 8000dca:	d102      	bne.n	8000dd2 <_read_r+0x1e>
 8000dcc:	682b      	ldr	r3, [r5, #0]
 8000dce:	b103      	cbz	r3, 8000dd2 <_read_r+0x1e>
 8000dd0:	6023      	str	r3, [r4, #0]
 8000dd2:	bd38      	pop	{r3, r4, r5, pc}
 8000dd4:	20000210 	.word	0x20000210

08000dd8 <_write_r>:
 8000dd8:	b538      	push	{r3, r4, r5, lr}
 8000dda:	4d07      	ldr	r5, [pc, #28]	; (8000df8 <_write_r+0x20>)
 8000ddc:	4604      	mov	r4, r0
 8000dde:	4608      	mov	r0, r1
 8000de0:	4611      	mov	r1, r2
 8000de2:	2200      	movs	r2, #0
 8000de4:	602a      	str	r2, [r5, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	f7ff fd17 	bl	800081a <_write>
 8000dec:	1c43      	adds	r3, r0, #1
 8000dee:	d102      	bne.n	8000df6 <_write_r+0x1e>
 8000df0:	682b      	ldr	r3, [r5, #0]
 8000df2:	b103      	cbz	r3, 8000df6 <_write_r+0x1e>
 8000df4:	6023      	str	r3, [r4, #0]
 8000df6:	bd38      	pop	{r3, r4, r5, pc}
 8000df8:	20000210 	.word	0x20000210

08000dfc <__errno>:
 8000dfc:	4b01      	ldr	r3, [pc, #4]	; (8000e04 <__errno+0x8>)
 8000dfe:	6818      	ldr	r0, [r3, #0]
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	2000005c 	.word	0x2000005c

08000e08 <__libc_init_array>:
 8000e08:	b570      	push	{r4, r5, r6, lr}
 8000e0a:	4d0d      	ldr	r5, [pc, #52]	; (8000e40 <__libc_init_array+0x38>)
 8000e0c:	4c0d      	ldr	r4, [pc, #52]	; (8000e44 <__libc_init_array+0x3c>)
 8000e0e:	1b64      	subs	r4, r4, r5
 8000e10:	10a4      	asrs	r4, r4, #2
 8000e12:	2600      	movs	r6, #0
 8000e14:	42a6      	cmp	r6, r4
 8000e16:	d109      	bne.n	8000e2c <__libc_init_array+0x24>
 8000e18:	4d0b      	ldr	r5, [pc, #44]	; (8000e48 <__libc_init_array+0x40>)
 8000e1a:	4c0c      	ldr	r4, [pc, #48]	; (8000e4c <__libc_init_array+0x44>)
 8000e1c:	f000 fa50 	bl	80012c0 <_init>
 8000e20:	1b64      	subs	r4, r4, r5
 8000e22:	10a4      	asrs	r4, r4, #2
 8000e24:	2600      	movs	r6, #0
 8000e26:	42a6      	cmp	r6, r4
 8000e28:	d105      	bne.n	8000e36 <__libc_init_array+0x2e>
 8000e2a:	bd70      	pop	{r4, r5, r6, pc}
 8000e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e30:	4798      	blx	r3
 8000e32:	3601      	adds	r6, #1
 8000e34:	e7ee      	b.n	8000e14 <__libc_init_array+0xc>
 8000e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e3a:	4798      	blx	r3
 8000e3c:	3601      	adds	r6, #1
 8000e3e:	e7f2      	b.n	8000e26 <__libc_init_array+0x1e>
 8000e40:	080012fc 	.word	0x080012fc
 8000e44:	080012fc 	.word	0x080012fc
 8000e48:	080012fc 	.word	0x080012fc
 8000e4c:	08001300 	.word	0x08001300

08000e50 <__retarget_lock_init_recursive>:
 8000e50:	4770      	bx	lr

08000e52 <__retarget_lock_acquire_recursive>:
 8000e52:	4770      	bx	lr

08000e54 <__retarget_lock_release_recursive>:
 8000e54:	4770      	bx	lr
	...

08000e58 <_free_r>:
 8000e58:	b538      	push	{r3, r4, r5, lr}
 8000e5a:	4605      	mov	r5, r0
 8000e5c:	2900      	cmp	r1, #0
 8000e5e:	d041      	beq.n	8000ee4 <_free_r+0x8c>
 8000e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e64:	1f0c      	subs	r4, r1, #4
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	bfb8      	it	lt
 8000e6a:	18e4      	addlt	r4, r4, r3
 8000e6c:	f000 f8de 	bl	800102c <__malloc_lock>
 8000e70:	4a1d      	ldr	r2, [pc, #116]	; (8000ee8 <_free_r+0x90>)
 8000e72:	6813      	ldr	r3, [r2, #0]
 8000e74:	b933      	cbnz	r3, 8000e84 <_free_r+0x2c>
 8000e76:	6063      	str	r3, [r4, #4]
 8000e78:	6014      	str	r4, [r2, #0]
 8000e7a:	4628      	mov	r0, r5
 8000e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e80:	f000 b8da 	b.w	8001038 <__malloc_unlock>
 8000e84:	42a3      	cmp	r3, r4
 8000e86:	d908      	bls.n	8000e9a <_free_r+0x42>
 8000e88:	6820      	ldr	r0, [r4, #0]
 8000e8a:	1821      	adds	r1, r4, r0
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	bf01      	itttt	eq
 8000e90:	6819      	ldreq	r1, [r3, #0]
 8000e92:	685b      	ldreq	r3, [r3, #4]
 8000e94:	1809      	addeq	r1, r1, r0
 8000e96:	6021      	streq	r1, [r4, #0]
 8000e98:	e7ed      	b.n	8000e76 <_free_r+0x1e>
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	b10b      	cbz	r3, 8000ea4 <_free_r+0x4c>
 8000ea0:	42a3      	cmp	r3, r4
 8000ea2:	d9fa      	bls.n	8000e9a <_free_r+0x42>
 8000ea4:	6811      	ldr	r1, [r2, #0]
 8000ea6:	1850      	adds	r0, r2, r1
 8000ea8:	42a0      	cmp	r0, r4
 8000eaa:	d10b      	bne.n	8000ec4 <_free_r+0x6c>
 8000eac:	6820      	ldr	r0, [r4, #0]
 8000eae:	4401      	add	r1, r0
 8000eb0:	1850      	adds	r0, r2, r1
 8000eb2:	4283      	cmp	r3, r0
 8000eb4:	6011      	str	r1, [r2, #0]
 8000eb6:	d1e0      	bne.n	8000e7a <_free_r+0x22>
 8000eb8:	6818      	ldr	r0, [r3, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	6053      	str	r3, [r2, #4]
 8000ebe:	4408      	add	r0, r1
 8000ec0:	6010      	str	r0, [r2, #0]
 8000ec2:	e7da      	b.n	8000e7a <_free_r+0x22>
 8000ec4:	d902      	bls.n	8000ecc <_free_r+0x74>
 8000ec6:	230c      	movs	r3, #12
 8000ec8:	602b      	str	r3, [r5, #0]
 8000eca:	e7d6      	b.n	8000e7a <_free_r+0x22>
 8000ecc:	6820      	ldr	r0, [r4, #0]
 8000ece:	1821      	adds	r1, r4, r0
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	bf04      	itt	eq
 8000ed4:	6819      	ldreq	r1, [r3, #0]
 8000ed6:	685b      	ldreq	r3, [r3, #4]
 8000ed8:	6063      	str	r3, [r4, #4]
 8000eda:	bf04      	itt	eq
 8000edc:	1809      	addeq	r1, r1, r0
 8000ede:	6021      	streq	r1, [r4, #0]
 8000ee0:	6054      	str	r4, [r2, #4]
 8000ee2:	e7ca      	b.n	8000e7a <_free_r+0x22>
 8000ee4:	bd38      	pop	{r3, r4, r5, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000218 	.word	0x20000218

08000eec <sbrk_aligned>:
 8000eec:	b570      	push	{r4, r5, r6, lr}
 8000eee:	4e0e      	ldr	r6, [pc, #56]	; (8000f28 <sbrk_aligned+0x3c>)
 8000ef0:	460c      	mov	r4, r1
 8000ef2:	6831      	ldr	r1, [r6, #0]
 8000ef4:	4605      	mov	r5, r0
 8000ef6:	b911      	cbnz	r1, 8000efe <sbrk_aligned+0x12>
 8000ef8:	f000 f9d2 	bl	80012a0 <_sbrk_r>
 8000efc:	6030      	str	r0, [r6, #0]
 8000efe:	4621      	mov	r1, r4
 8000f00:	4628      	mov	r0, r5
 8000f02:	f000 f9cd 	bl	80012a0 <_sbrk_r>
 8000f06:	1c43      	adds	r3, r0, #1
 8000f08:	d00a      	beq.n	8000f20 <sbrk_aligned+0x34>
 8000f0a:	1cc4      	adds	r4, r0, #3
 8000f0c:	f024 0403 	bic.w	r4, r4, #3
 8000f10:	42a0      	cmp	r0, r4
 8000f12:	d007      	beq.n	8000f24 <sbrk_aligned+0x38>
 8000f14:	1a21      	subs	r1, r4, r0
 8000f16:	4628      	mov	r0, r5
 8000f18:	f000 f9c2 	bl	80012a0 <_sbrk_r>
 8000f1c:	3001      	adds	r0, #1
 8000f1e:	d101      	bne.n	8000f24 <sbrk_aligned+0x38>
 8000f20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000f24:	4620      	mov	r0, r4
 8000f26:	bd70      	pop	{r4, r5, r6, pc}
 8000f28:	2000021c 	.word	0x2000021c

08000f2c <_malloc_r>:
 8000f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f30:	1ccd      	adds	r5, r1, #3
 8000f32:	f025 0503 	bic.w	r5, r5, #3
 8000f36:	3508      	adds	r5, #8
 8000f38:	2d0c      	cmp	r5, #12
 8000f3a:	bf38      	it	cc
 8000f3c:	250c      	movcc	r5, #12
 8000f3e:	2d00      	cmp	r5, #0
 8000f40:	4607      	mov	r7, r0
 8000f42:	db01      	blt.n	8000f48 <_malloc_r+0x1c>
 8000f44:	42a9      	cmp	r1, r5
 8000f46:	d905      	bls.n	8000f54 <_malloc_r+0x28>
 8000f48:	230c      	movs	r3, #12
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	2600      	movs	r6, #0
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001028 <_malloc_r+0xfc>
 8000f58:	f000 f868 	bl	800102c <__malloc_lock>
 8000f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8000f60:	461c      	mov	r4, r3
 8000f62:	bb5c      	cbnz	r4, 8000fbc <_malloc_r+0x90>
 8000f64:	4629      	mov	r1, r5
 8000f66:	4638      	mov	r0, r7
 8000f68:	f7ff ffc0 	bl	8000eec <sbrk_aligned>
 8000f6c:	1c43      	adds	r3, r0, #1
 8000f6e:	4604      	mov	r4, r0
 8000f70:	d155      	bne.n	800101e <_malloc_r+0xf2>
 8000f72:	f8d8 4000 	ldr.w	r4, [r8]
 8000f76:	4626      	mov	r6, r4
 8000f78:	2e00      	cmp	r6, #0
 8000f7a:	d145      	bne.n	8001008 <_malloc_r+0xdc>
 8000f7c:	2c00      	cmp	r4, #0
 8000f7e:	d048      	beq.n	8001012 <_malloc_r+0xe6>
 8000f80:	6823      	ldr	r3, [r4, #0]
 8000f82:	4631      	mov	r1, r6
 8000f84:	4638      	mov	r0, r7
 8000f86:	eb04 0903 	add.w	r9, r4, r3
 8000f8a:	f000 f989 	bl	80012a0 <_sbrk_r>
 8000f8e:	4581      	cmp	r9, r0
 8000f90:	d13f      	bne.n	8001012 <_malloc_r+0xe6>
 8000f92:	6821      	ldr	r1, [r4, #0]
 8000f94:	1a6d      	subs	r5, r5, r1
 8000f96:	4629      	mov	r1, r5
 8000f98:	4638      	mov	r0, r7
 8000f9a:	f7ff ffa7 	bl	8000eec <sbrk_aligned>
 8000f9e:	3001      	adds	r0, #1
 8000fa0:	d037      	beq.n	8001012 <_malloc_r+0xe6>
 8000fa2:	6823      	ldr	r3, [r4, #0]
 8000fa4:	442b      	add	r3, r5
 8000fa6:	6023      	str	r3, [r4, #0]
 8000fa8:	f8d8 3000 	ldr.w	r3, [r8]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d038      	beq.n	8001022 <_malloc_r+0xf6>
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	42a2      	cmp	r2, r4
 8000fb4:	d12b      	bne.n	800100e <_malloc_r+0xe2>
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	e00f      	b.n	8000fdc <_malloc_r+0xb0>
 8000fbc:	6822      	ldr	r2, [r4, #0]
 8000fbe:	1b52      	subs	r2, r2, r5
 8000fc0:	d41f      	bmi.n	8001002 <_malloc_r+0xd6>
 8000fc2:	2a0b      	cmp	r2, #11
 8000fc4:	d917      	bls.n	8000ff6 <_malloc_r+0xca>
 8000fc6:	1961      	adds	r1, r4, r5
 8000fc8:	42a3      	cmp	r3, r4
 8000fca:	6025      	str	r5, [r4, #0]
 8000fcc:	bf18      	it	ne
 8000fce:	6059      	strne	r1, [r3, #4]
 8000fd0:	6863      	ldr	r3, [r4, #4]
 8000fd2:	bf08      	it	eq
 8000fd4:	f8c8 1000 	streq.w	r1, [r8]
 8000fd8:	5162      	str	r2, [r4, r5]
 8000fda:	604b      	str	r3, [r1, #4]
 8000fdc:	4638      	mov	r0, r7
 8000fde:	f104 060b 	add.w	r6, r4, #11
 8000fe2:	f000 f829 	bl	8001038 <__malloc_unlock>
 8000fe6:	f026 0607 	bic.w	r6, r6, #7
 8000fea:	1d23      	adds	r3, r4, #4
 8000fec:	1af2      	subs	r2, r6, r3
 8000fee:	d0ae      	beq.n	8000f4e <_malloc_r+0x22>
 8000ff0:	1b9b      	subs	r3, r3, r6
 8000ff2:	50a3      	str	r3, [r4, r2]
 8000ff4:	e7ab      	b.n	8000f4e <_malloc_r+0x22>
 8000ff6:	42a3      	cmp	r3, r4
 8000ff8:	6862      	ldr	r2, [r4, #4]
 8000ffa:	d1dd      	bne.n	8000fb8 <_malloc_r+0x8c>
 8000ffc:	f8c8 2000 	str.w	r2, [r8]
 8001000:	e7ec      	b.n	8000fdc <_malloc_r+0xb0>
 8001002:	4623      	mov	r3, r4
 8001004:	6864      	ldr	r4, [r4, #4]
 8001006:	e7ac      	b.n	8000f62 <_malloc_r+0x36>
 8001008:	4634      	mov	r4, r6
 800100a:	6876      	ldr	r6, [r6, #4]
 800100c:	e7b4      	b.n	8000f78 <_malloc_r+0x4c>
 800100e:	4613      	mov	r3, r2
 8001010:	e7cc      	b.n	8000fac <_malloc_r+0x80>
 8001012:	230c      	movs	r3, #12
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	4638      	mov	r0, r7
 8001018:	f000 f80e 	bl	8001038 <__malloc_unlock>
 800101c:	e797      	b.n	8000f4e <_malloc_r+0x22>
 800101e:	6025      	str	r5, [r4, #0]
 8001020:	e7dc      	b.n	8000fdc <_malloc_r+0xb0>
 8001022:	605b      	str	r3, [r3, #4]
 8001024:	deff      	udf	#255	; 0xff
 8001026:	bf00      	nop
 8001028:	20000218 	.word	0x20000218

0800102c <__malloc_lock>:
 800102c:	4801      	ldr	r0, [pc, #4]	; (8001034 <__malloc_lock+0x8>)
 800102e:	f7ff bf10 	b.w	8000e52 <__retarget_lock_acquire_recursive>
 8001032:	bf00      	nop
 8001034:	20000214 	.word	0x20000214

08001038 <__malloc_unlock>:
 8001038:	4801      	ldr	r0, [pc, #4]	; (8001040 <__malloc_unlock+0x8>)
 800103a:	f7ff bf0b 	b.w	8000e54 <__retarget_lock_release_recursive>
 800103e:	bf00      	nop
 8001040:	20000214 	.word	0x20000214

08001044 <__sflush_r>:
 8001044:	898a      	ldrh	r2, [r1, #12]
 8001046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001048:	4605      	mov	r5, r0
 800104a:	0710      	lsls	r0, r2, #28
 800104c:	460c      	mov	r4, r1
 800104e:	d457      	bmi.n	8001100 <__sflush_r+0xbc>
 8001050:	684b      	ldr	r3, [r1, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	dc04      	bgt.n	8001060 <__sflush_r+0x1c>
 8001056:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001058:	2b00      	cmp	r3, #0
 800105a:	dc01      	bgt.n	8001060 <__sflush_r+0x1c>
 800105c:	2000      	movs	r0, #0
 800105e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001060:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001062:	2e00      	cmp	r6, #0
 8001064:	d0fa      	beq.n	800105c <__sflush_r+0x18>
 8001066:	2300      	movs	r3, #0
 8001068:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800106c:	682f      	ldr	r7, [r5, #0]
 800106e:	6a21      	ldr	r1, [r4, #32]
 8001070:	602b      	str	r3, [r5, #0]
 8001072:	d032      	beq.n	80010da <__sflush_r+0x96>
 8001074:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001076:	89a3      	ldrh	r3, [r4, #12]
 8001078:	075a      	lsls	r2, r3, #29
 800107a:	d505      	bpl.n	8001088 <__sflush_r+0x44>
 800107c:	6863      	ldr	r3, [r4, #4]
 800107e:	1ac0      	subs	r0, r0, r3
 8001080:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001082:	b10b      	cbz	r3, 8001088 <__sflush_r+0x44>
 8001084:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001086:	1ac0      	subs	r0, r0, r3
 8001088:	2300      	movs	r3, #0
 800108a:	4602      	mov	r2, r0
 800108c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800108e:	6a21      	ldr	r1, [r4, #32]
 8001090:	4628      	mov	r0, r5
 8001092:	47b0      	blx	r6
 8001094:	1c43      	adds	r3, r0, #1
 8001096:	89a3      	ldrh	r3, [r4, #12]
 8001098:	d106      	bne.n	80010a8 <__sflush_r+0x64>
 800109a:	6829      	ldr	r1, [r5, #0]
 800109c:	291d      	cmp	r1, #29
 800109e:	d82b      	bhi.n	80010f8 <__sflush_r+0xb4>
 80010a0:	4a28      	ldr	r2, [pc, #160]	; (8001144 <__sflush_r+0x100>)
 80010a2:	410a      	asrs	r2, r1
 80010a4:	07d6      	lsls	r6, r2, #31
 80010a6:	d427      	bmi.n	80010f8 <__sflush_r+0xb4>
 80010a8:	2200      	movs	r2, #0
 80010aa:	6062      	str	r2, [r4, #4]
 80010ac:	04d9      	lsls	r1, r3, #19
 80010ae:	6922      	ldr	r2, [r4, #16]
 80010b0:	6022      	str	r2, [r4, #0]
 80010b2:	d504      	bpl.n	80010be <__sflush_r+0x7a>
 80010b4:	1c42      	adds	r2, r0, #1
 80010b6:	d101      	bne.n	80010bc <__sflush_r+0x78>
 80010b8:	682b      	ldr	r3, [r5, #0]
 80010ba:	b903      	cbnz	r3, 80010be <__sflush_r+0x7a>
 80010bc:	6560      	str	r0, [r4, #84]	; 0x54
 80010be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80010c0:	602f      	str	r7, [r5, #0]
 80010c2:	2900      	cmp	r1, #0
 80010c4:	d0ca      	beq.n	800105c <__sflush_r+0x18>
 80010c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80010ca:	4299      	cmp	r1, r3
 80010cc:	d002      	beq.n	80010d4 <__sflush_r+0x90>
 80010ce:	4628      	mov	r0, r5
 80010d0:	f7ff fec2 	bl	8000e58 <_free_r>
 80010d4:	2000      	movs	r0, #0
 80010d6:	6360      	str	r0, [r4, #52]	; 0x34
 80010d8:	e7c1      	b.n	800105e <__sflush_r+0x1a>
 80010da:	2301      	movs	r3, #1
 80010dc:	4628      	mov	r0, r5
 80010de:	47b0      	blx	r6
 80010e0:	1c41      	adds	r1, r0, #1
 80010e2:	d1c8      	bne.n	8001076 <__sflush_r+0x32>
 80010e4:	682b      	ldr	r3, [r5, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0c5      	beq.n	8001076 <__sflush_r+0x32>
 80010ea:	2b1d      	cmp	r3, #29
 80010ec:	d001      	beq.n	80010f2 <__sflush_r+0xae>
 80010ee:	2b16      	cmp	r3, #22
 80010f0:	d101      	bne.n	80010f6 <__sflush_r+0xb2>
 80010f2:	602f      	str	r7, [r5, #0]
 80010f4:	e7b2      	b.n	800105c <__sflush_r+0x18>
 80010f6:	89a3      	ldrh	r3, [r4, #12]
 80010f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010fc:	81a3      	strh	r3, [r4, #12]
 80010fe:	e7ae      	b.n	800105e <__sflush_r+0x1a>
 8001100:	690f      	ldr	r7, [r1, #16]
 8001102:	2f00      	cmp	r7, #0
 8001104:	d0aa      	beq.n	800105c <__sflush_r+0x18>
 8001106:	0793      	lsls	r3, r2, #30
 8001108:	680e      	ldr	r6, [r1, #0]
 800110a:	bf08      	it	eq
 800110c:	694b      	ldreq	r3, [r1, #20]
 800110e:	600f      	str	r7, [r1, #0]
 8001110:	bf18      	it	ne
 8001112:	2300      	movne	r3, #0
 8001114:	1bf6      	subs	r6, r6, r7
 8001116:	608b      	str	r3, [r1, #8]
 8001118:	2e00      	cmp	r6, #0
 800111a:	dd9f      	ble.n	800105c <__sflush_r+0x18>
 800111c:	6a21      	ldr	r1, [r4, #32]
 800111e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001122:	4633      	mov	r3, r6
 8001124:	463a      	mov	r2, r7
 8001126:	4628      	mov	r0, r5
 8001128:	47e0      	blx	ip
 800112a:	2800      	cmp	r0, #0
 800112c:	dc06      	bgt.n	800113c <__sflush_r+0xf8>
 800112e:	89a3      	ldrh	r3, [r4, #12]
 8001130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001134:	81a3      	strh	r3, [r4, #12]
 8001136:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800113a:	e790      	b.n	800105e <__sflush_r+0x1a>
 800113c:	4407      	add	r7, r0
 800113e:	1a36      	subs	r6, r6, r0
 8001140:	e7ea      	b.n	8001118 <__sflush_r+0xd4>
 8001142:	bf00      	nop
 8001144:	dfbffffe 	.word	0xdfbffffe

08001148 <_fflush_r>:
 8001148:	b538      	push	{r3, r4, r5, lr}
 800114a:	690b      	ldr	r3, [r1, #16]
 800114c:	4605      	mov	r5, r0
 800114e:	460c      	mov	r4, r1
 8001150:	b913      	cbnz	r3, 8001158 <_fflush_r+0x10>
 8001152:	2500      	movs	r5, #0
 8001154:	4628      	mov	r0, r5
 8001156:	bd38      	pop	{r3, r4, r5, pc}
 8001158:	b118      	cbz	r0, 8001162 <_fflush_r+0x1a>
 800115a:	6a03      	ldr	r3, [r0, #32]
 800115c:	b90b      	cbnz	r3, 8001162 <_fflush_r+0x1a>
 800115e:	f7ff fc95 	bl	8000a8c <__sinit>
 8001162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f3      	beq.n	8001152 <_fflush_r+0xa>
 800116a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800116c:	07d0      	lsls	r0, r2, #31
 800116e:	d404      	bmi.n	800117a <_fflush_r+0x32>
 8001170:	0599      	lsls	r1, r3, #22
 8001172:	d402      	bmi.n	800117a <_fflush_r+0x32>
 8001174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001176:	f7ff fe6c 	bl	8000e52 <__retarget_lock_acquire_recursive>
 800117a:	4628      	mov	r0, r5
 800117c:	4621      	mov	r1, r4
 800117e:	f7ff ff61 	bl	8001044 <__sflush_r>
 8001182:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001184:	07da      	lsls	r2, r3, #31
 8001186:	4605      	mov	r5, r0
 8001188:	d4e4      	bmi.n	8001154 <_fflush_r+0xc>
 800118a:	89a3      	ldrh	r3, [r4, #12]
 800118c:	059b      	lsls	r3, r3, #22
 800118e:	d4e1      	bmi.n	8001154 <_fflush_r+0xc>
 8001190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001192:	f7ff fe5f 	bl	8000e54 <__retarget_lock_release_recursive>
 8001196:	e7dd      	b.n	8001154 <_fflush_r+0xc>

08001198 <__swhatbuf_r>:
 8001198:	b570      	push	{r4, r5, r6, lr}
 800119a:	460c      	mov	r4, r1
 800119c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011a0:	2900      	cmp	r1, #0
 80011a2:	b096      	sub	sp, #88	; 0x58
 80011a4:	4615      	mov	r5, r2
 80011a6:	461e      	mov	r6, r3
 80011a8:	da0d      	bge.n	80011c6 <__swhatbuf_r+0x2e>
 80011aa:	89a3      	ldrh	r3, [r4, #12]
 80011ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80011b0:	f04f 0100 	mov.w	r1, #0
 80011b4:	bf0c      	ite	eq
 80011b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80011ba:	2340      	movne	r3, #64	; 0x40
 80011bc:	2000      	movs	r0, #0
 80011be:	6031      	str	r1, [r6, #0]
 80011c0:	602b      	str	r3, [r5, #0]
 80011c2:	b016      	add	sp, #88	; 0x58
 80011c4:	bd70      	pop	{r4, r5, r6, pc}
 80011c6:	466a      	mov	r2, sp
 80011c8:	f000 f848 	bl	800125c <_fstat_r>
 80011cc:	2800      	cmp	r0, #0
 80011ce:	dbec      	blt.n	80011aa <__swhatbuf_r+0x12>
 80011d0:	9901      	ldr	r1, [sp, #4]
 80011d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80011d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80011da:	4259      	negs	r1, r3
 80011dc:	4159      	adcs	r1, r3
 80011de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e2:	e7eb      	b.n	80011bc <__swhatbuf_r+0x24>

080011e4 <__smakebuf_r>:
 80011e4:	898b      	ldrh	r3, [r1, #12]
 80011e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80011e8:	079d      	lsls	r5, r3, #30
 80011ea:	4606      	mov	r6, r0
 80011ec:	460c      	mov	r4, r1
 80011ee:	d507      	bpl.n	8001200 <__smakebuf_r+0x1c>
 80011f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80011f4:	6023      	str	r3, [r4, #0]
 80011f6:	6123      	str	r3, [r4, #16]
 80011f8:	2301      	movs	r3, #1
 80011fa:	6163      	str	r3, [r4, #20]
 80011fc:	b002      	add	sp, #8
 80011fe:	bd70      	pop	{r4, r5, r6, pc}
 8001200:	ab01      	add	r3, sp, #4
 8001202:	466a      	mov	r2, sp
 8001204:	f7ff ffc8 	bl	8001198 <__swhatbuf_r>
 8001208:	9900      	ldr	r1, [sp, #0]
 800120a:	4605      	mov	r5, r0
 800120c:	4630      	mov	r0, r6
 800120e:	f7ff fe8d 	bl	8000f2c <_malloc_r>
 8001212:	b948      	cbnz	r0, 8001228 <__smakebuf_r+0x44>
 8001214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001218:	059a      	lsls	r2, r3, #22
 800121a:	d4ef      	bmi.n	80011fc <__smakebuf_r+0x18>
 800121c:	f023 0303 	bic.w	r3, r3, #3
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	81a3      	strh	r3, [r4, #12]
 8001226:	e7e3      	b.n	80011f0 <__smakebuf_r+0xc>
 8001228:	89a3      	ldrh	r3, [r4, #12]
 800122a:	6020      	str	r0, [r4, #0]
 800122c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001230:	81a3      	strh	r3, [r4, #12]
 8001232:	9b00      	ldr	r3, [sp, #0]
 8001234:	6163      	str	r3, [r4, #20]
 8001236:	9b01      	ldr	r3, [sp, #4]
 8001238:	6120      	str	r0, [r4, #16]
 800123a:	b15b      	cbz	r3, 8001254 <__smakebuf_r+0x70>
 800123c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001240:	4630      	mov	r0, r6
 8001242:	f000 f81d 	bl	8001280 <_isatty_r>
 8001246:	b128      	cbz	r0, 8001254 <__smakebuf_r+0x70>
 8001248:	89a3      	ldrh	r3, [r4, #12]
 800124a:	f023 0303 	bic.w	r3, r3, #3
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	81a3      	strh	r3, [r4, #12]
 8001254:	89a3      	ldrh	r3, [r4, #12]
 8001256:	431d      	orrs	r5, r3
 8001258:	81a5      	strh	r5, [r4, #12]
 800125a:	e7cf      	b.n	80011fc <__smakebuf_r+0x18>

0800125c <_fstat_r>:
 800125c:	b538      	push	{r3, r4, r5, lr}
 800125e:	4d07      	ldr	r5, [pc, #28]	; (800127c <_fstat_r+0x20>)
 8001260:	2300      	movs	r3, #0
 8001262:	4604      	mov	r4, r0
 8001264:	4608      	mov	r0, r1
 8001266:	4611      	mov	r1, r2
 8001268:	602b      	str	r3, [r5, #0]
 800126a:	f7ff fafd 	bl	8000868 <_fstat>
 800126e:	1c43      	adds	r3, r0, #1
 8001270:	d102      	bne.n	8001278 <_fstat_r+0x1c>
 8001272:	682b      	ldr	r3, [r5, #0]
 8001274:	b103      	cbz	r3, 8001278 <_fstat_r+0x1c>
 8001276:	6023      	str	r3, [r4, #0]
 8001278:	bd38      	pop	{r3, r4, r5, pc}
 800127a:	bf00      	nop
 800127c:	20000210 	.word	0x20000210

08001280 <_isatty_r>:
 8001280:	b538      	push	{r3, r4, r5, lr}
 8001282:	4d06      	ldr	r5, [pc, #24]	; (800129c <_isatty_r+0x1c>)
 8001284:	2300      	movs	r3, #0
 8001286:	4604      	mov	r4, r0
 8001288:	4608      	mov	r0, r1
 800128a:	602b      	str	r3, [r5, #0]
 800128c:	f7ff fafb 	bl	8000886 <_isatty>
 8001290:	1c43      	adds	r3, r0, #1
 8001292:	d102      	bne.n	800129a <_isatty_r+0x1a>
 8001294:	682b      	ldr	r3, [r5, #0]
 8001296:	b103      	cbz	r3, 800129a <_isatty_r+0x1a>
 8001298:	6023      	str	r3, [r4, #0]
 800129a:	bd38      	pop	{r3, r4, r5, pc}
 800129c:	20000210 	.word	0x20000210

080012a0 <_sbrk_r>:
 80012a0:	b538      	push	{r3, r4, r5, lr}
 80012a2:	4d06      	ldr	r5, [pc, #24]	; (80012bc <_sbrk_r+0x1c>)
 80012a4:	2300      	movs	r3, #0
 80012a6:	4604      	mov	r4, r0
 80012a8:	4608      	mov	r0, r1
 80012aa:	602b      	str	r3, [r5, #0]
 80012ac:	f7ff fb02 	bl	80008b4 <_sbrk>
 80012b0:	1c43      	adds	r3, r0, #1
 80012b2:	d102      	bne.n	80012ba <_sbrk_r+0x1a>
 80012b4:	682b      	ldr	r3, [r5, #0]
 80012b6:	b103      	cbz	r3, 80012ba <_sbrk_r+0x1a>
 80012b8:	6023      	str	r3, [r4, #0]
 80012ba:	bd38      	pop	{r3, r4, r5, pc}
 80012bc:	20000210 	.word	0x20000210

080012c0 <_init>:
 80012c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c2:	bf00      	nop
 80012c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012c6:	bc08      	pop	{r3}
 80012c8:	469e      	mov	lr, r3
 80012ca:	4770      	bx	lr

080012cc <_fini>:
 80012cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ce:	bf00      	nop
 80012d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012d2:	bc08      	pop	{r3}
 80012d4:	469e      	mov	lr, r3
 80012d6:	4770      	bx	lr
